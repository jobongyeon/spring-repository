<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- Spring MVC @Controller 프로그래밍 모델을 활성화 한다. -->
	<mvc:annotation-driven />
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<!-- servlet 에서 root( / ) 를 가져가는 url 패턴으로 사용한다면 리소스(img파일등) 을 view 단에서 직접 접근 할수가 
		없기때문에 예외 폴더를 설정함으로서 view단에서 직접적인 접근이 가능하게 한다. -->
	<mvc:resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<!-- controller 에서 처리되어 return 되어지는 string값의 view 파일 명에 앞에 /web-inf/views/ 뒤에 .jsp 를 붙여줌으로서 view단의 파일명을 정의하여 준다. -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>
	<!-- component태그에 설정파일에 추가해서 component태그가 적용된 클래스를 빈으로 등록. 정의할 기본 패키지를 base-package속성으로 등록하면 됨 -->
	<context:component-scan base-package="blog.naver.jby9215" />

	<!-- commons dbcp : 앞 예제들처럼 properties를 사용하여 값설정을 하여도 됨 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<!-- DI코드 / setter -->
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://127.0.0.1:3306/jjdev?useUnicod=true&amp;characterEncoding=euckr" />
		<property name="username" value="root" />
		<property name="password" value="java0000" />
	</bean>
	<!-- mybatis 세션생성을 위한 팩토리 생성 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- mybatis 세션생성시 사용할 dataSource주입 -->
		<property name="dataSource" ref="dataSource" />
		<!-- mybatis 세션생성후 쿼리를 실행시킬때 사용할 쿼리위치(매퍼)설정 -->
		<property name="mapperLocations"><!-- mapperLocations : String[] -->
			<list>
				<value>classpath:blog/naver/jby9215/service/BoardMapper.xml</value>
			</list>
		</property>
	</bean>
	<!-- mybatis를 사용하여 db에접속하여 쿼리를 보내는 주체인 SqlSessionTemplate빈 생성 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
</beans>
